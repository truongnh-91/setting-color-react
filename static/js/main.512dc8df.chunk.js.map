{"version":3,"sources":["components/ColorPicker.js","components/SizeSetting.js","components/Reset.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["ColorPicker","props","state","colors","color","backgroundColor","this","onReceiveColor","elmColors","map","index","key","style","getColor","className","onClick","setActiveColor","PureComponent","SizeSetting","value","onReceiveFontSize","fontSize","type","changeFontSize","Reset","params","onReset","resetToDefault","Result","borderColor","id","setStyle","App","onSetColor","setState","onChangeFontSize","onResetToDefault","isReset","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.512dc8df.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nclass ColorPicker extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n          colors: ['red', 'orange', 'yellow']\r\n        };\r\n      }\r\n    \r\n      getColor(color){\r\n        return {\r\n          backgroundColor: color\r\n        };\r\n      }\r\n\r\n    setActiveColor(color){\r\n        this.props.onReceiveColor(color);\r\n    }\r\n\r\n    render() {\r\n        let elmColors = this.state.colors.map((color, index) =>{\r\n            return <span key = {index} \r\n                         style={this.getColor(color)}\r\n                         className={this.props.color === color ? 'active' : ''}\r\n                         onClick ={() => this.setActiveColor(color)}\r\n                         ></span>\r\n          });\r\n        return (\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"panel panel-primary\">\r\n                    <div className=\"panel-heading\">\r\n                        <h3 className=\"panel-title\">Color Picker</h3>\r\n                    </div>\r\n                    <div className=\"panel-body\">\r\n                        {elmColors}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorPicker;","import React, { PureComponent } from 'react';\r\n\r\nclass SizeSetting extends PureComponent {\r\n\r\n    changeFontSize(value){\r\n        this.props.onReceiveFontSize(value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"panel panel-warning\">\r\n                    <div className=\"panel-heading\">\r\n                        <h3 className=\"panel-title\">Size: {this.props.fontSize}px</h3>\r\n                    </div>\r\n                <div className=\"panel-body\">\r\n                    <button type=\"button\" className=\"btn btn-success\" \r\n                        onClick = {()=> this.changeFontSize(2)}>+\r\n                    </button>\r\n                    {'\\u00A0'}\r\n                    <button type=\"button\" className=\"btn btn-success\" \r\n                        onClick = {()=> this.changeFontSize(-2)}>-\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SizeSetting;","import React, { PureComponent } from 'react';\r\n\r\nclass Reset extends PureComponent {\r\n    resetToDefault(params){\r\n        this.props.onReset(params);\r\n    }\r\n    render() {\r\n        return (\r\n            <button type=\"button\" className=\"btn btn-primary\" \r\n                onClick = {() => this.resetToDefault(true)}>Reset\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Reset;","import React, { PureComponent } from 'react';\r\n\r\nclass Result extends PureComponent {\r\n    setStyle(){\r\n        return {\r\n                color: this.props.color,\r\n                borderColor: this.props.color,\r\n                fontSize: this.props.fontSize\r\n                }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                <p>Color : {this.props.color} - Fontsize : {this.props.fontSize}px</p>\r\n                <div id=\"content\" style={this.setStyle()}>\r\n                    Content\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Result;","import React, { PureComponent } from 'react';\n\nimport ColorPicker from './components/ColorPicker';\nimport SizeSetting from './components/SizeSetting';\nimport Reset from './components/Reset';\nimport Result from './components/Result';\n\nimport './App.css';\n\nclass App extends PureComponent {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: 'red',\n      fontSize: 12  \n    };\n  }\n  \n  onSetColor = (params) =>{\n    this.setState ({\n      color: params\n    });\n  }\n\n  onChangeFontSize = (value) =>{\n      this.setState({\n        fontSize: this.state.fontSize + value >=8 && this.state.fontSize + value <= 36 ? this.state.fontSize + value : this.state.fontSize\n      });\n  }\n\n  onResetToDefault = (isReset) => {\n    if(isReset){\n      this.setState({\n        color: 'red',\n        fontSize: 12\n      });\n    }\n  }\n\n  render() {\n    return (\n          <div className=\"container mt-50\" id=\"root\">\n              <div className=\"row\">\n                <ColorPicker \n                            color={this.state.color} \n                            onReceiveColor={this.onSetColor}/>\n                  <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                    <SizeSetting \n                            fontSize={this.state.fontSize} \n                            onReceiveFontSize = {this.onChangeFontSize}/>\n                    <Reset onReset={this.onResetToDefault}/>\n                  </div>\n              </div>\n              <div className=\"row\">\n            <Result color={this.state.color} fontSize={this.state.fontSize}/>\n            </div>\n          </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}